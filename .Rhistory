names(res) <- taxa
# VII. RESULTS OBJECT 2  ##
###########################
return(list(synonyms = syns, associations = res))
}
pathogens <- associations(spec, clean=TRUE, syn_include=TRUE,
spec_type="plant", process=TRUE)
pathogens <- associations(spec, spec_type="H", clean=TRUE, syn_include=TRUE,
spec_type="plant", process=TRUE)
pathogens <- associations(spec, spec_type="FH", clean=TRUE, syn_include=TRUE,
spec_type="plant", process=TRUE)
pathogens <- associations(spec, spec_type="fungus", clean=TRUE, syn_include=TRUE,
spec_type="plant", process=TRUE)
pathogens <- associations(spec, spec_type="fungus", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
pathogens <- associations(spec, ddatabase = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, ddatabase = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
pathogens <- associations(spec, database = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
pathogens <- associations(spec, database = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
##                       association                  ##
##      This code is part of the rusda package        ##
##    © F.-S. Krah 2015 (last update: 2015-06-22)     ##
associations <- function(spec, database = c("FH", "SP", "both"),
spec_type = c("plant", "fungus"),
clean = TRUE, syn_include = TRUE, process = TRUE)
{
if(!exists("spec_type")) stop("spec_type must be specified")
if(!exists("database")) stop("database must be specified")
expect_match(spec_type, ("fungus|plant"))
expect_match(database, ("FH|SP|both"))
if(length(grep("\\sx\\s", spec)) > 0)
stop(" no hybrids allowed as input ")
ifelse(length(grep(" ", spec)) > 0, tax <- strsplit(spec, " "), tax <- strsplit(spec, "_"))
## I. PARSE DATA    ##
######################
if(process == TRUE) { message("... retrieving data ... for:") }
p <- foreach(i = seq_along(tax)) %do% getHF(tax[[i]], process, spec_type = spec_type)
## II. DATA CONDITIONS ##
#########################
taxa <- lapply(tax, function(x) { paste(as.character(x[1]), as.character(x[2])) })
co <- lapply(p, getCOND)
## III. SYNONYMS ##
###################
if(process == TRUE) { message("... extracting Synonyms ...") }
syns <- lapply(p, getSYNS, process = process, taxa = taxa)
names(syns) <- taxa
## IV. EXTRACRING DATA  ##
##########################
# FH DB #
if(process == TRUE & database == "FH" | database == "both") { message("... extracting Fungus-Hosts DB ...") }
i <- NULL
hosts_hf <- foreach(i = seq_along(taxa)) %do%  {
if(length(co[[i]]$hfu) == 0 | length(co[[i]]$hf.st) == 0){ hf <- "nodata" }
if(length(co[[i]]$hf.st) > 0)
{# Stop
hf.c <- grep("The Literature database has", p[[i]])
ifelse(length(hf.c) > 0, hf.sp <- hf.c,
hf.sp <- (grep("No records were found in the Literature database", p[[i]])))
if(length(hf.sp) == 0){
hf.sp <- (grep(paste("There are no records for ",taxa[[i]],
" in the Literature database", sep=""), p[[i]]))}
# extract
p[[i]][(co[[i]]$hf.st + 1):(hf.sp - 1)]
}
}
names(hosts_hf) <- unlist(taxa)
# Speciments DB  #
if(process == TRUE & database == "SP" | database == "both") { message("... extracting Specimens DB ...") }
i <- NULL
hosts_sp <- foreach(i=seq_along(taxa)) %do% {
if(length(co[[i]]$sp) == 0 | length(co[[i]]$spe.st) == 0){ specim <- "nodata" }
if(length(co[[i]]$spe.st) > 0)
{
spe.sp <- grep("Systematic Mycology and Microbiology Laboratory[.]",p[[i]])
spe.sp <- spe.sp[length(spe.sp)]
specim <- p[[i]][(co[[i]]$spe.st + 1):(spe.sp - 1)]
}
}
names(hosts_sp) <- unlist(taxa)
## IV. SYNONYMS EXCLUDE  ##
###########################
## Exclude results for synonyms if wanted:
# find occurences for taxon for stop condition and
# extract until next synonym of input taxa
if(syn_include == FALSE){
if(process == TRUE) { message("... excluding synonyms ...") }
no_syns <- function(x){
# search start and stops
st <- foreach(i = seq_along(taxa)) %do% grep(taxa[[i]], x[[i]])
sp <- foreach(i = seq_along(taxa)) %do% {
sy <- paste(syns[[i]][!syns[[i]] == taxa[[i]]], collapse = "|")
grep(sy, x[[i]], value = FALSE)}
# choose next stop if there
spp <- list(); for(i in seq_along(taxa)){
if(is.integer(sp[[i]]) && length(sp[[i]]) == 0L){spp[[i]] <- integer(0)}
if(length(st[[i]]) > 0 & length(sp[[i]]) > 0)
# choose the value next higher from starting (st) point, so two conditions
# must be matched: bigger and next integer, so the one with min distance
spp[[i]] <- sp[[i]][(sp[[i]] > st[[i]][1]) & sp[[i]] == ((min(st[[i]][1] - sp[[i]]) * -1) + st[[i]][1])]
}
# choose only
res <- list(); for(i in seq_along(taxa)){
# if there is no start and no stop
if(length(st[[i]]) == 0 & is.integer(spp[[i]]) && length(spp[[i]]) == 0L){res[[i]] <- x}
# if start but no stop: from stop to end (happens if input species occures at the bottom)
if(length(st[[i]]) > 0 & length(spp[[i]]) == 0L)
res[[i]] <- x[[i]][st[[i]][1] : length(x[[i]])]
# if there is a start and stop condition
if(length(st[[i]]) > 0 & length(spp[[i]]) > 0)
if(length(st[[i]]) > 0)res[[i]] <- x[[i]][st[[i]][1]:(spp[[i]] - 1)]
else
res[[i]] <- x[[i]][st[[i]]:(spp[[i]] - 1)] }
return(res)
}
res <- lapply(list(hosts_hf, hosts_sp), no_syns)
hosts_hf <- res[[1]]
hosts_sp <- res[[2]]
}
## V. RESULTS OBJECT ##
#######################
if (database == "FH") { res <-  hosts_hf }
if (database == "SP") { res <-  hosts_sp }
if (database == "both") {
res <-  foreach(i = seq_along(hosts_hf)) %do% c(hosts_hf[[i]], hosts_sp[[i]])
names(res) <- names(hosts_hf)
res <- lapply(res, function(x)
{ if(length(grep("nodata",x)) == 2) { x <- "nodata" }
if(!length(grep("nodata",x)) == 2) { x }})
}
## VI. CLEAN    ##
##################
## do not conduct clean step if wanted
if(clean == TRUE){
if(process == TRUE) { message("... cleaning step ...")}
res <- lapply(res, clean_step, taxa = taxa, syns = syns, spec_type = spec_type, synonyms_incl = TRUE)
}
res <- lapply(res, unique)
names(res) <- taxa
# VII. RESULTS OBJECT 2  ##
###########################
return(list(synonyms = syns, associations = res))
}
pathogens <- associations(spec, database = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, database = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
library("foreach")
pathogens <- associations(spec, database = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
library("rusda")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, database = "FH", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
pathogens <- associations(spec, database = "SP", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, database = "SP", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
pathogens <- associations(spec, database, clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
pathogens <- associations(spec, clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
pathogens <- associations(spec, clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
##                       association                  ##
##      This code is part of the rusda package        ##
##    © F.-S. Krah 2015 (last update: 2015-06-22)     ##
associations <- function(spec, database = c("FH", "SP", "both"),
spec_type = c("plant", "fungus"),
clean = TRUE, syn_include = TRUE, process = TRUE)
{
expect_match(spec_type, ("fungus|plant"))
expect_match(database, ("FH|SP|both"))
if(length(grep("\\sx\\s", spec)) > 0)
stop(" no hybrids allowed as input ")
ifelse(length(grep(" ", spec)) > 0, tax <- strsplit(spec, " "), tax <- strsplit(spec, "_"))
## I. PARSE DATA    ##
######################
if(process == TRUE) { message("... retrieving data ... for:") }
p <- foreach(i = seq_along(tax)) %do% getHF(tax[[i]], process, spec_type = spec_type)
## II. DATA CONDITIONS ##
#########################
taxa <- lapply(tax, function(x) { paste(as.character(x[1]), as.character(x[2])) })
co <- lapply(p, getCOND)
## III. SYNONYMS ##
###################
if(process == TRUE) { message("... extracting Synonyms ...") }
syns <- lapply(p, getSYNS, process = process, taxa = taxa)
names(syns) <- taxa
## IV. EXTRACRING DATA  ##
##########################
# FH DB #
if(process == TRUE & database == "FH" | database == "both") { message("... extracting Fungus-Hosts DB ...") }
i <- NULL
hosts_hf <- foreach(i = seq_along(taxa)) %do%  {
if(length(co[[i]]$hfu) == 0 | length(co[[i]]$hf.st) == 0){ hf <- "nodata" }
if(length(co[[i]]$hf.st) > 0)
{# Stop
hf.c <- grep("The Literature database has", p[[i]])
ifelse(length(hf.c) > 0, hf.sp <- hf.c,
hf.sp <- (grep("No records were found in the Literature database", p[[i]])))
if(length(hf.sp) == 0){
hf.sp <- (grep(paste("There are no records for ",taxa[[i]],
" in the Literature database", sep=""), p[[i]]))}
# extract
p[[i]][(co[[i]]$hf.st + 1):(hf.sp - 1)]
}
}
names(hosts_hf) <- unlist(taxa)
# Speciments DB  #
if(process == TRUE & database == "SP" | database == "both") { message("... extracting Specimens DB ...") }
i <- NULL
hosts_sp <- foreach(i=seq_along(taxa)) %do% {
if(length(co[[i]]$sp) == 0 | length(co[[i]]$spe.st) == 0){ specim <- "nodata" }
if(length(co[[i]]$spe.st) > 0)
{
spe.sp <- grep("Systematic Mycology and Microbiology Laboratory[.]",p[[i]])
spe.sp <- spe.sp[length(spe.sp)]
specim <- p[[i]][(co[[i]]$spe.st + 1):(spe.sp - 1)]
}
}
names(hosts_sp) <- unlist(taxa)
## IV. SYNONYMS EXCLUDE  ##
###########################
## Exclude results for synonyms if wanted:
# find occurences for taxon for stop condition and
# extract until next synonym of input taxa
if(syn_include == FALSE){
if(process == TRUE) { message("... excluding synonyms ...") }
no_syns <- function(x){
# search start and stops
st <- foreach(i = seq_along(taxa)) %do% grep(taxa[[i]], x[[i]])
sp <- foreach(i = seq_along(taxa)) %do% {
sy <- paste(syns[[i]][!syns[[i]] == taxa[[i]]], collapse = "|")
grep(sy, x[[i]], value = FALSE)}
# choose next stop if there
spp <- list(); for(i in seq_along(taxa)){
if(is.integer(sp[[i]]) && length(sp[[i]]) == 0L){spp[[i]] <- integer(0)}
if(length(st[[i]]) > 0 & length(sp[[i]]) > 0)
# choose the value next higher from starting (st) point, so two conditions
# must be matched: bigger and next integer, so the one with min distance
spp[[i]] <- sp[[i]][(sp[[i]] > st[[i]][1]) & sp[[i]] == ((min(st[[i]][1] - sp[[i]]) * -1) + st[[i]][1])]
}
# choose only
res <- list(); for(i in seq_along(taxa)){
# if there is no start and no stop
if(length(st[[i]]) == 0 & is.integer(spp[[i]]) && length(spp[[i]]) == 0L){res[[i]] <- x}
# if start but no stop: from stop to end (happens if input species occures at the bottom)
if(length(st[[i]]) > 0 & length(spp[[i]]) == 0L)
res[[i]] <- x[[i]][st[[i]][1] : length(x[[i]])]
# if there is a start and stop condition
if(length(st[[i]]) > 0 & length(spp[[i]]) > 0)
if(length(st[[i]]) > 0)res[[i]] <- x[[i]][st[[i]][1]:(spp[[i]] - 1)]
else
res[[i]] <- x[[i]][st[[i]]:(spp[[i]] - 1)] }
return(res)
}
res <- lapply(list(hosts_hf, hosts_sp), no_syns)
hosts_hf <- res[[1]]
hosts_sp <- res[[2]]
}
## V. RESULTS OBJECT ##
#######################
if (database == "FH") { res <-  hosts_hf }
if (database == "SP") { res <-  hosts_sp }
if (database == "both") {
res <-  foreach(i = seq_along(hosts_hf)) %do% c(hosts_hf[[i]], hosts_sp[[i]])
names(res) <- names(hosts_hf)
res <- lapply(res, function(x)
{ if(length(grep("nodata",x)) == 2) { x <- "nodata" }
if(!length(grep("nodata",x)) == 2) { x }})
}
## VI. CLEAN    ##
##################
## do not conduct clean step if wanted
if(clean == TRUE){
if(process == TRUE) { message("... cleaning step ...")}
res <- lapply(res, clean_step, taxa = taxa, syns = syns, spec_type = spec_type, synonyms_incl = TRUE)
}
res <- lapply(res, unique)
names(res) <- taxa
# VII. RESULTS OBJECT 2  ##
###########################
return(list(synonyms = syns, associations = res))
}
library("rusda")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
database = c("FH", "SP", "both")
expect_match(database, ("FH|SP|both"))
library("testthat")
expect_match(database, ("FH|SP|both"))
expect_match(database, ("FH||SP||both"))
database
expect_match(database, xor("FH", "SP","both"))
xor("FH", "SP","both")
expect_match(database, ("FH|SP|both"), all=FALSE)
expect_match(database, ("FH|SP|both"), all=TRUE)
x <- 1:10
make_expectation(x)
x <- database
make_expectation(x)
expect_that(x, equals(c("FH", "SP", "both")))
expect_that(database, equals(c("FH", "SP", "both")))
database = ""
expect_that(database, equals(c("FH", "SP", "both")))
expect_match(database, ("FH|SP|both"), all=TRUE)
expect_equal(database, ("FH|SP|both"))
rm(database)
expect_equal(database, ("FH|SP|both"))
database = c("FH", "SP", "both")
expect_equal(database, ("FH|SP|both"))
library("rusda")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
pathogens <- associations(spec, database="HF", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
spec <- c("Rosellinia ligniaria")
spec <- c("Fagus sylvatica")
pathogens <- associations(spec, database="HF", clean=TRUE, syn_include=TRUE, spec_type="plant", process=TRUE)
getwd()
dir <- paste("~"", tolower(tax@ingroup), "data", sep = "/")
setwd(dir)
db <- dbPars(dbname = tax@ingroup, password = password)
dbPars
library(megaptera)
password = "agaricales"
tax <- taxon(ingroup = "Basidiomycota",
outgroup = "Xylariales",
kingdom = "Fungi",
reference.rank = "class")
db <- dbPars(dbname = tax@ingroup, password = password)
dbPars
dbPars <- function (host = "localhost", port = 5432, dbname, user = "postgres",
password)
{
dbname <- tolower(dbname)
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = password, dbname = dbname)
sql <- paste("SELECT 1 FROM pg_database WHERE", sql.wrap(dbname,
term = "datname"))
if (nrow(dbGetQuery(conn, sql)) == 1) {
cat("\ndatabase '", dbname, "' exists", sep = "")
}
else {
cat("\ndatabase '", dbname, "' created", sep = "")
sql <- paste("CREATE DATABASE", dbname, "WITH ENCODING='UTF8'",
"CONNECTION LIMIT=-1;")
dbSendQuery(conn, sql)
}
dbDisconnect(conn)
new("dbPars", host = host, port = port, dbname = dbname,
user = user, password = password)
}
db <- dbPars(dbname = tax@ingroup, password = password)
library("DBI")
db <- dbPars(dbname = tax@ingroup, password = password)
tax@ingroup
dbPars
port = 5432
user = "postgres"
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = password)
dbConnect
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales")
password = "agaricales", dbname="basidiomyota")
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="basidiomyota")
dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="basidiomyota_tree")
library("seta")
dBget
dbConnect(PostgreSQL(), user = "postgres", host = "localhost",
port = 5432, dbname = "basidiomyota", password = "agaricales")
dBget(dbname="basidiomyota_trait", query="select * from trait", password="agaricales")
library(seta)
dBget(dbname="basidiomyota_trait", query="select * from trait", password="agaricales")
library("DBI")
dBget(dbname="basidiomyota_trait", query="select * from trait", password="agaricales")
library("PostgreSQL")
library("RPostgreSQL")
dBget(dbname="basidiomyota_trait", query="select * from trait", password="agaricales")
library("megaptera")
dBget(dbname="basidiomyota_trait", query="select * from trait", password="agaricales")
library("seta")
dBget(dbname="basidiomyota_trait", query="select * from trait", password="agaricales")
dBget
dBget(dbname="basidiomycota_trait", query="select * from trait", password="agaricales")
dBget(dbname="Basidiomycota_trait", query="select * from trait", password="agaricales")
db <- dbPars(dbname = "basidiomycota", password = password)
db <- dbPars(dbname = "basidiomycota", password = "agaricales"")
db <- dbPars(dbname = "basidiomycota", password = "agaricales")
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="basidiomyota_tree")
user = "postgres"
port = 5432
host = "localhost"
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="basidiomyota_tree")
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="basidiomycota_tree")
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="basidiomycota_tree")
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="basidiomycota_trait")
dBget
vonn <- dbConnect(PostgreSQL(), user = "postgres", host = "localhost",
port = 5432, dbname = dbname, password = password)
password="agaricales"
vonn <- dbConnect(PostgreSQL(), user = "postgres", host = "localhost",
port = 5432, dbname = dbname, password = password)
dbname="Basidiomycota_trait"
conn <- dbConnect(PostgreSQL(), user = user, port = port,
password = "agaricales", dbname="Basidiomycota_trait")
vonn <- dbConnect(PostgreSQL(), user = "postgres", host = "localhost",
port = 5432, dbname = dbname, password = password)
user
conn <- dbConnect(PostgreSQL(), user = user, port = port, host = "localhost",
password = "agaricales", dbname="Basidiomycota_trait")
db <- dbPars(dbname = "basidiomycota", password = "agaricales")
dbPars <- function (host = "localhost", port = 5432, dbname, user = "postgres",
password, host = "localhost")
{
dbname <- tolower(dbname)
conn <- dbConnect(PostgreSQL(), user = user, port = port, host = host,
password = password, dbname=dbname)
sql <- paste("SELECT 1 FROM pg_database WHERE", sql.wrap(dbname,
term = "datname"))
if (nrow(dbGetQuery(conn, sql)) == 1) {
cat("\ndatabase '", dbname, "' exists", sep = "")
}
else {
cat("\ndatabase '", dbname, "' created", sep = "")
sql <- paste("CREATE DATABASE", dbname, "WITH ENCODING='UTF8'",
"CONNECTION LIMIT=-1;")
dbSendQuery(conn, sql)
}
dbDisconnect(conn)
new("dbPars", host = host, port = port, dbname = dbname,
user = user, password = password)
}
dbPars <- function (host = "localhost", port = 5432, dbname, user = "postgres",
password)
{
dbname <- tolower(dbname)
conn <- dbConnect(PostgreSQL(), user = user, port = port, host = host,
password = password, dbname=dbname)
sql <- paste("SELECT 1 FROM pg_database WHERE", sql.wrap(dbname,
term = "datname"))
if (nrow(dbGetQuery(conn, sql)) == 1) {
cat("\ndatabase '", dbname, "' exists", sep = "")
}
else {
cat("\ndatabase '", dbname, "' created", sep = "")
sql <- paste("CREATE DATABASE", dbname, "WITH ENCODING='UTF8'",
"CONNECTION LIMIT=-1;")
dbSendQuery(conn, sql)
}
dbDisconnect(conn)
new("dbPars", host = host, port = port, dbname = dbname,
user = user, password = password)
}
db <- dbPars(dbname = "basidiomycota", password = "agaricales")
db <- dbPars(dbname = "basidiomycota_tree", password = "agaricales")
mafft.exe <- "/usr/local/bin/mafft"
gblocks.exe <- "/Applications/Gblocks_0.91b/Gblocks"
x <- megapteraProj(db = db,
taxon = tax,
align.exe = mafft.exe,
mask.exe = gblocks.exe,
locus = locus(),
update = TRUE)
tax <- taxon(ingroup = "Basidiomycota",
outgroup = "Xylariales",
kingdom = "Fungi",
reference.rank = "class")
x <- megapteraProj(db = db,
taxon = tax,
align.exe = mafft.exe,
mask.exe = gblocks.exe,
locus = locus(),
update = TRUE)
ingroup <- "Basidiomycota"
outgroup = "Xylariales"
megapteraProj <- x
checkSpecLocus(megapteraProj)
table(checkSpecLocus(megapteraProj), length)
lapply(checkSpecLocus(megapteraProj), length)
lapply(checkSpecLocus(megapteraProj)[1], length)
lapply(checkSpecLocus(megapteraProj)[[1]], length)
checkSpecLocus(megapteraProj)
checkSpecLocus(megapteraProj)[[1]]
dbPars
library("megaptera")
db <- dbPars(dbname = "basidiomycota_tree", password = "agaricales")
load("~data/loci.rda")
load("~/data/loci.rda")
dbPars
dirname(x)
file.path("..", "data")
load("../data/loci.rda")
load("../data/loci.rda")
load("~/data/loci.rda")
load("/data/loci.rda")
load("data/loci.rda")
load("::data/loci.rda")
load("..data/loci.rda")
load("~data/loci.rda")
load("../data/loci.rda")
setwd("~/Documents/R/pkgs/rusda")
knitr::knit("README.Rmd")
