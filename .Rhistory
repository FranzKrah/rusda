#' @param id a single study id or a vector of study ids
#' @param sep seperator how to collapse output literature references
#' @return an object of class \code{list} with studies
#'
#' @ import stringr
#' @author Franz-Sebastian Krah
#' @export
getStudy <- function(id, sep = "; ") {
if(any(str_detect(id, "BPI")))
stop("id cannot contain BPIs")
x <- as.character(id)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
res <- paste(unlist(lapply(x, getStudy_single)), collapse = sep)
return(res)
}
lapply(res$study_id, getStudy)
res$study_id
res
if (database == "both") {
res <-  foreach(i = seq_along(hosts_hf)) %do% c(hosts_hf[[i]], hosts_sp[[i]])
names(res) <- names(hosts_hf)
res <- lapply(res, function(x)
{ if(length(grep("nodata",x)) == 2) { x <- "nodata" }
if(!length(grep("nodata",x)) == 2) { x }})
}
## VI. EXTRACT DATA ANS CLEAN    ##
###################################
## do not conduct clean step if wanted
res <- lapply(res, extract_info, spec_type = spec_type)
if(clean == TRUE)
if(clean == TRUE){
if(process == TRUE) {
message("... cleaning step ...")
}
## apply clean_step for each sublist (rapply not working, don't know why currently)
for(j in 1:length(res)){
if(!(length(res[[j]])==1 & length(grep("nodata", res[[j]])) == 1)){
res[[j]] <- clean_step(res[[j]], taxa = taxa,
syns = syns, spec_type = spec_type, synonyms_incl = FALSE, subspec = TRUE)
}
}
}
res <- lapply(res, function(x){
if(length(grep("nodata", x)) > 0 ){
x[-grep("nodata", x)]
}else{x} })
res <- data.frame(do.call(rbind, res))
res <- data.frame(input = rownames(res), res, row.names = NULL)
res$input <- str_replace(res$input, "\\.\\d+", "")
res
res$study_id <- as.character(res$study_id)
res
if(spec_type=="fungus"){
names(res) <- c("fungus", "host", "country", "study_id")
}
lapply(res$study_id, getStudy)
getStudy_single <- function(id = 42264){
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/fungushost/new_rptOneLit.cfm?fungRec=", id, "&thisError=")
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
res <- pars[[1]]
return(res)
}
lapply(res$study_id, getStudy)
res$study_id
getStudy
id <-
res$study_id
str_detect(id, "BPI")
any(str_detect(id, "BPI"))
#' Downloads studies for input study IDs
#'
#' Downloads studies for study IDs which are output of associations
#' @param id a single study id or a vector of study ids
#' @param sep seperator how to collapse output literature references
#' @return an object of class \code{list} with studies
#'
#' @ import stringr
#' @author Franz-Sebastian Krah
#' @export
getStudy <- function(id, sep = "; ") {
if(any(str_detect(id, "BPI")))
stop("id cannot contain BPIs")
x <- as.character(id)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
res <- paste(unlist(lapply(x, getStudy_single)), collapse = sep)
return(res)
}
x
res
res$study_id
id <- res$study_id
if(any(str_detect(id, "BPI")))
stop("id cannot contain BPIs")
x <- as.character(id)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
x
x
id
x <- as.character(id)
str_extract_all(x, "\\d*")[[1]]
x <- str_extract_all(x, "\\d*")
x
x[str_detect(x, "\\d+")]
str_detect(x, "\\d+")
str_detect(id, "BPI")
id[!str_detect(id, "BPI")]
df <- res[[1]]
if(any(str_detect(df$study_id, "BPI")))
warning("References will only added for FH database records")
df$study_id
df
df <- res
if(any(str_detect(df$study_id, "BPI")))
warning("References will only added for FH database records")
getStudy_single <- function(id = 42264){
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/fungushost/new_rptOneLit.cfm?fungRec=", id, "&thisError=")
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
res <- pars[[1]]
return(res)
}
split(df, str_detect(df$study_id, "BPI"))
df.s <- split(df, str_detect(df$study_id, "BPI"))
df.s[[1]]
str_detect(df$study_id, "BPI")
df <- split(df, str_detect(df$study_id, "BPI"))
df
res
df.s <- split(df, str_detect(df$study_id, "BPI"))
df <- res
df.s <- split(df, str_detect(df$study_id, "BPI"))
df <- df.s[[1]]
df
x <- as.character(df$study_id)
str_extract_all(x, "\\d*")
extractRefs <- function(x){
x <- as.character(df$study_id)
x <- str_extract_all(x, "\\d*")
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
lapply(df$study_id, extractRefs)
df$study_id
extractRefs <- function(x){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
lapply(df$study_id, extractRefs)
extractRefs
df$study_id
x <- df$study_id[1]
x <- as.character(x)
x <- str_extract_all(x, "\\d*")
x <- x[str_detect(x, "\\d+")]
x[str_detect(x, "\\d+")]
x
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
extractRefs <- function(x, sep){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
sep = ";"
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
extractRefs <- function(x, sep){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
lapply(df$study_id, extractRefs)
lapply(df$study_id, extractRefs, sep = sep)
refs <- lapply(df$study_id[1:10], extractRefs, sep = sep)
refs
unique(df$study_id)
df$study_id
ids <- unique(df$study_id)
refs <- lapply(ids, extractRefs, sep = sep)
refs
names(refs) <- ids
data.frame(unlist(refs))
data.frame(ids, unlist(refs))
data.frame(ids, reference = unlist(refs))
refs <- data.frame(ids, reference = unlist(refs))
match(df$study_id, refs$ids)
refs[match(df$study_id, refs$ids)]
refs[match(df$study_id, refs$ids), ]
refs[match(df$study_id, refs$ids), "references"]
refs[match(df$study_id, refs$ids),]$references
refs[match(df$study_id, refs$ids),]
refs[match(df$study_id, refs$ids),"reference"]
df <- data.frame(df, reference = refs[match(df$study_id, refs$ids),"reference"])
head(df)
df.s[[1]] <- df
df <- data.frame(do.call(rbind, df.s))
df.s[[2]]
res
tail(res)
BPI = "BPI 633739"
str_replace(BPI, " ", "%20")
BPI <- str_replace(BPI, " ", "%20")
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/specimens/new_rptSpecimenOneRec.cfm?thisrec=",
BPI)
url
pars <- rawToChar(GET(url)$content)
pars
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
pars
res <- pars[[1]]
res
pars
pars[str_detect(pars, "")]
pars <- pars[str_detect(pars, "")]
x <- "BPI 633739"
extractBPIs <- function(x, sep){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
extractBPIs(BPI)
sep = ";"
extractBPIs(BPI)
extractBPIs <- function(x, sep){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
extractBPIs(BPI)
x
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x
tail(res)
res
if (database == "both") {
res <-  foreach(i = seq_along(hosts_hf)) %do% c(hosts_hf[[i]], hosts_sp[[i]])
names(res) <- names(hosts_hf)
res <- lapply(res, function(x)
{ if(length(grep("nodata",x)) == 2) { x <- "nodata" }
if(!length(grep("nodata",x)) == 2) { x }})
}
## VI. EXTRACT DATA ANS CLEAN    ##
###################################
## do not conduct clean step if wanted
res <- lapply(res, extract_info, spec_type = spec_type)
if(clean == TRUE){
if(process == TRUE) {
message("... cleaning step ...")
}
## apply clean_step for each sublist (rapply not working, don't know why currently)
for(j in 1:length(res)){
if(!(length(res[[j]])==1 & length(grep("nodata", res[[j]])) == 1)){
res[[j]] <- clean_step(res[[j]], taxa = taxa,
syns = syns, spec_type = spec_type, synonyms_incl = FALSE, subspec = TRUE)
}
}
}
res <- lapply(res, function(x){
if(length(grep("nodata", x)) > 0 ){
x[-grep("nodata", x)]
}else{x} })
res <- data.frame(do.call(rbind, res))
res <- data.frame(input = rownames(res), res, row.names = NULL)
res$input <- str_replace(res$input, "\\.\\d+", "")
res$study_id <- as.character(res$study_id)
if(spec_type=="fungus"){
names(res) <- c("fungus", "host", "country", "study_id")
}
res
tail(res)
tail(res, 100)
x <- as.character(x)
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
x
x <- "BPI 633739"
x <- as.character(x)
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
paste(unlist(lapply(x, getBPI_single)), collapse = sep)
getBPI_single
getBPI_single <- function(BPI = "BPI 633739"){
BPI <- str_replace(BPI, " ", "%20")
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/specimens/new_rptSpecimenOneRec.cfm?thisrec=",
BPI)
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
pars <- pars[str_detect(pars, "")]
return(pars)
}
paste(unlist(lapply(x, getBPI_single)), collapse = sep)
extractBPIs <- function(x, sep){
x <- as.character(x)
paste(unlist(lapply(x, getBPI_single)), collapse = sep)
}
df <- res
if(any(str_detect(df$study_id, "BPI"))){
df.s <- split(df, str_detect(df$study_id, "BPI"))
df <- df.s[[1]]
}
if(any(str_detect(df$study_id, "BPI"))){
df.s <- split(df, str_detect(df$study_id, "BPI"))
df.fh <- df.s[[1]]
df.sp <- df.s[[2]]
}
res[str_detect(res$country)]
res[str_detect(res$study_id, "BPI"),]
res[!str_detect(res$study_id, "BPI"),]
res.fh <- res[!str_detect(res$study_id, "BPI"),]
id <- res.fh$study_id
ids <- unique(id)
refs <- lapply(ids, extractRefs, sep = sep)
refs
names(refs) <- ids
ids
refs
length(refs)
length(refs$reference)
getStudy <- function(id, sep = "; ") {
if(any(str_detect(df, "BPI")))
warning("References will only added for FH database records")
getStudy_single <- function(id = 42264){
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/fungushost/new_rptOneLit.cfm?fungRec=", id, "&thisError=")
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
res <- pars[[1]]
return(res)
}
extractRefs <- function(x, sep){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
ids <- unique(id)
refs <- lapply(ids, extractRefs, sep = sep)
names(refs) <- ids
refs <- data.frame(ids, reference = unlist(refs))
id <- data.frame(id, reference = refs[match(id, refs$ids),"reference"])
return(id)
}
getStudy(res.fh$study_id[1:10])
getStudy(res.fh$study_id[1:20])
id <- res.fh$study_id[1:20]
if(any(str_detect(id, "BPI")))
warning("References will only added for FH database records")
getStudy_single <- function(id = 42264){
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/fungushost/new_rptOneLit.cfm?fungRec=", id, "&thisError=")
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
res <- pars[[1]]
return(res)
}
extractRefs <- function(x, sep){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
ids <- unique(id)
refs <- lapply(ids, extractRefs, sep = sep)
names(refs) <- ids
refs <- data.frame(ids, reference = unlist(refs))
data.frame(id, reference = refs[match(id, refs$ids),"reference"])
id <- data.frame(id, reference = refs[match(id, refs$ids),"reference"])
getStudy <- function(id, sep = "; ") {
if(any(str_detect(id, "BPI")))
warning("References will only added for FH database records")
getStudy_single <- function(id = 42264){
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/fungushost/new_rptOneLit.cfm?fungRec=", id, "&thisError=")
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
res <- pars[[1]]
return(res)
}
extractRefs <- function(x, sep){
x <- as.character(x)
x <- str_extract_all(x, "\\d*")[[1]]
x <- x[str_detect(x, "\\d+")]
paste(unlist(lapply(x, getStudy_single)), collapse = sep)
}
ids <- unique(id)
refs <- lapply(ids, extractRefs, sep = sep)
names(refs) <- ids
refs <- data.frame(ids, reference = unlist(refs))
id <- data.frame(id, reference = refs[match(id, refs$ids),"reference"])
return(id)
}
getStudy(res.fh$study_id[1:20])
getStudy(res.fh$study_id[1:10])
getBPI <- function(BPI, sep = "; ") {
getBPI_single <- function(BPI = "BPI 633739"){
BPI <- str_replace(BPI, " ", "%20")
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/specimens/new_rptSpecimenOneRec.cfm?thisrec=",
BPI)
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
pars <- pars[str_detect(pars, "")]
return(pars)
}
extractBPIs <- function(x, sep){
x <- as.character(x)
paste(unlist(lapply(x, getBPI_single)), collapse = sep)
}
ids <- unique(BPI)
refs <- lapply(ids, extractBPIs, sep = sep)
names(refs) <- ids
refs <- data.frame(ids, specimen = unlist(refs))
id <- data.frame(id, specimen = refs[match(BPI, refs$ids),"specimen"])
return(id)
}
res.bpi <- res[str_detect(res$study_id, "BPI"), ]
getBPI(res.bpi$study_id[1:10])
getBPI <- function(BPI, sep = "; ") {
getBPI_single <- function(BPI = "BPI 633739"){
BPI <- str_replace(BPI, " ", "%20")
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/specimens/new_rptSpecimenOneRec.cfm?thisrec=",
BPI)
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
pars <- pars[str_detect(pars, "")]
return(pars)
}
extractBPIs <- function(x, sep){
x <- as.character(x)
paste(unlist(lapply(x, getBPI_single)), collapse = sep)
}
BPIs <- unique(BPI)
refs <- lapply(BPIs, extractBPIs, sep = sep)
names(refs) <- BPIs
refs <- data.frame(BPIs, specimen = unlist(refs))
BPI <- data.frame(BPI, specimen = refs[match(BPI, refs$ids),"specimen"])
return(id)
}
getBPI(res.bpi$study_id[1:10])
BPI <- res.bpi[1:10]
BPI
BPI <- res.bpi$study_id[1:10]
BPI
getBPI_single <- function(BPI = "BPI 633739"){
BPI <- str_replace(BPI, " ", "%20")
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/specimens/new_rptSpecimenOneRec.cfm?thisrec=",
BPI)
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
pars <- pars[str_detect(pars, "")]
return(pars)
}
extractBPIs <- function(x, sep){
x <- as.character(x)
paste(unlist(lapply(x, getBPI_single)), collapse = sep)
}
BPIs <- unique(BPI)
BPIs
refs <- lapply(BPIs, extractBPIs, sep = sep)
refs
data.frame(BPI, specimen = unlist(refs))
BPI <- data.frame(BPI, specimen = unlist(refs))
getBPI <- function(BPI, sep = "; ") {
getBPI_single <- function(BPI = "BPI 633739"){
BPI <- str_replace(BPI, " ", "%20")
url <- paste0("https://nt.ars-grin.gov/fungaldatabases/specimens/new_rptSpecimenOneRec.cfm?thisrec=",
BPI)
pars <- rawToChar(GET(url)$content)
pars <- htmlTreeParse(pars, useInternalNodes = TRUE)
pars <- xpathApply(pars, "//p", xmlValue)
pars <- unlist(pars)
pars <- pars[str_detect(pars, "")]
return(pars)
}
extractBPIs <- function(x, sep){
x <- as.character(x)
paste(unlist(lapply(x, getBPI_single)), collapse = sep)
}
refs <- lapply(BPIs, extractBPIs, sep = sep)
BPI <- data.frame(BPI, specimen = unlist(refs))
return(BPI)
}
getBPI(res.bpi$study_id[1:10])
setwd("Documents/R/pkgs/rusda")
roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise(clean = TRUE)
